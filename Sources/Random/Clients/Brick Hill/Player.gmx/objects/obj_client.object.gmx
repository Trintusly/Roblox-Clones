<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.APPDATA = environment_get_variable("APPDATA")+"\Brick Hill\";
global.ASSET_DIR = global.APPDATA + "assets\"

if !directory_exists(global.APPDATA) {directory_create(global.APPDATA);}
if !directory_exists(global.ASSET_DIR) {directory_create(global.ASSET_DIR);}

SOCKET = false

if (!get_params()) {
    game_end()
    exit;
}

message_background(bkg_message);
message_caption(1,"Brick Hill");
message_text_font("Montserrat",11,c_white,0)
message_input_font("Montserrat",11,c_black,0)
message_input_color(c_white)
message_button_font("Montserrat",11,c_white,0)
message_button(spr_button);
message_size(350,150);

debug = "";

d3d_start();

settings_create();

camera_create();

world_create();

window_ini();

server_connect();

//get_avatar();

chat_ini();

chatBox = textbox_create();
chatBox.text = "Press 't' to talk";
chatBox.single_line = true;
chatBox.max_chars = 84;
chatBox.select_on_focus = true;

Arch = d3d_model_create();
d3d_model_load(Arch, temp_directory+"\arch.d3d");

Brick = d3d_model_create();
d3d_model_load(Brick, temp_directory+"\brick.d3d");

Corner = d3d_model_create();
d3d_model_load(Corner, temp_directory+"\corner.d3d");

Corner_Inverted = d3d_model_create();
d3d_model_load(Corner_Inverted, temp_directory+"\corner_inv.d3d");

Dome = d3d_model_create();
d3d_model_load(Dome, temp_directory+"\dome.d3d");

Fence_Bottom = d3d_model_create();
d3d_model_load(Fence_Bottom, temp_directory+"\fence_bottom.d3d");
Fence_Middle = d3d_model_create();
d3d_model_load(Fence_Middle, temp_directory+"\fence_middle.d3d");
Fence_Top = d3d_model_create();
d3d_model_load(Fence_Top, temp_directory+"\fence_top.d3d");

Flag = d3d_model_create();
d3d_model_load(Flag, temp_directory+"\flag.d3d");

Flagpole_Base = d3d_model_create();
d3d_model_load(Flagpole_Base, temp_directory+"\flagpole_base.d3d");
Flagpole_Middle = d3d_model_create();
d3d_model_load(Flagpole_Middle, temp_directory+"\flagpole_middle.d3d");
Flagpole_Top = d3d_model_create();
d3d_model_load(Flagpole_Top, temp_directory+"\flagpole_top.d3d");

Round_Brick = d3d_model_create();
d3d_model_load(Round_Brick, temp_directory+"\round_brick.d3d");

Round_Large1x1 = d3d_model_create();
d3d_model_load(Round_Large1x1, temp_directory+"\round_large1x1.d3d");

Round_Small1x1 = d3d_model_create();
d3d_model_load(Round_Small1x1, temp_directory+"\round_small1x1.d3d");

Slope = d3d_model_create();
d3d_model_load(Slope, temp_directory+"\slope.d3d");

Vent = d3d_model_create();
d3d_model_load(Vent, temp_directory+"\vent.d3d");

name = "Player"

user_id = -1

admin = false;

PAUSED = false;

// it's the server telling the client they're authenticated you greasy skidd
authenticated = false

membership = 0

Face = -1;
Shirt = -1;
TShirt = -1;
Pants = -1;

Hat1_Tex = -1;
Hat2_Tex = -1;
Hat3_Tex = -1;

Hat1 = -1;
Hat2 = -1;
Hat3 = -1;

cachedItems = ds_map_create();

// Downloads
FaceDownload = -1;
TShirtDownload = -1;
ShirtDownload = -1;
PantsDownload = -1;
Hat1TexDownload = -1;
Hat1ModDownload = -1;
Hat2TexDownload = -1;
Hat2ModDownload = -1;
Hat3TexDownload = -1;
Hat3ModDownload = -1;

xPrev = 0;
yPrev = 0;
zPrev = 0;
lookingAt = -1;
lookingAtXPos = 0;
lookingAtYPos = 0;
lookingAtZPos = 0;

maxHealth = 100
maxSpeed = 4
animation = 0;
walking = false;
frame = 0;
Dist = 0;
Speech = ""

Ambient = 0;
SkyColor = $e6b271;
BasePlateColor = $248233;
BasePlateSize = 0;
BasePlateAlpha = 1;
SunIntensity = 200;

stud = background_get_texture(bkg_stud);

modelHead = d3d_model_create();
d3d_model_load(modelHead, temp_directory+"\Head.d3d");
modelTorso = d3d_model_create();
d3d_model_load(modelTorso, temp_directory+"\Torso.d3d");
modelTShirt = d3d_model_create();
d3d_model_load(modelTShirt, temp_directory+"\TShirt.d3d");
modelLArm = d3d_model_create();
d3d_model_load(modelLArm, temp_directory+"\LeftArm.d3d");
modelRArm = d3d_model_create();
d3d_model_load(modelRArm, temp_directory+"\RightArm.d3d");
modelLLeg = d3d_model_create();
d3d_model_load(modelLLeg, temp_directory+"\LeftLeg.d3d");
modelRLeg = d3d_model_create();
d3d_model_load(modelRLeg, temp_directory+"\RightLeg.d3d");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket_update_write(SOCKET);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if current_time mod 60000 == 0 {
    post_playing();
}*/


// THESE ARE CACHED !!!!!!!
if instance_number(obj_asset_download) &gt; 0 {
    if FaceDownload != -1 &amp;&amp; instance_exists(FaceDownload) {
        if FaceDownload.result {
            Face = background_add(FaceDownload.file, 1, 0);
            FaceDownload = -1
        }
    }
    if Hat1TexDownload != -1 &amp;&amp; instance_exists(Hat1TexDownload) {
        if Hat1TexDownload.result {
            Hat1_Tex = background_add(Hat1TexDownload.file, 0, 0);
            Hat1TexDownload = -1
        }
    }
    if Hat1ModDownload != -1 &amp;&amp; instance_exists(Hat1ModDownload) {
        if Hat1ModDownload.result {
            Hat1 = scr_load_model_obj(Hat1ModDownload.file, Hat1ModDownload.assetId);
            Hat1ModDownload = -1
        }
    }
    if Hat2TexDownload != -1 &amp;&amp; instance_exists(Hat2TexDownload) {
        if Hat2TexDownload.result {
            Hat2_Tex = background_add(Hat2TexDownload.file, 0, 0); 
            Hat2TexDownload = -1
        }
    }
    if Hat2ModDownload != -1 &amp;&amp; instance_exists(Hat2ModDownload) {
        if Hat2ModDownload.result {
            Hat2 = scr_load_model_obj(Hat2ModDownload.file, Hat2ModDownload.assetId);
            Hat2ModDownload = -1
        }
    }
    if Hat3TexDownload != -1 &amp;&amp; instance_exists(Hat3TexDownload) {
        if Hat3TexDownload.result {
            Hat3_Tex = background_add(Hat3TexDownload.file, 0, 0);
            Hat3TexDownload = -1
        }
    }
    if Hat3ModDownload != -1 &amp;&amp; instance_exists(Hat3ModDownload) {
        if Hat3ModDownload.result {
            Hat3 = scr_load_model_obj(Hat3ModDownload.file, Hat3ModDownload.assetId);
            Hat3ModDownload = -1
        }
    }
    if Item_TexDownload != -1 &amp;&amp; instance_exists(Item_TexDownload) {
        if Item_TexDownload.result {
            Item_Tex = background_add(Item_TexDownload.file,0,0);
            Item_TexDownload = -1
        }
    }
    if Item_ModDownload != -1 &amp;&amp; instance_exists(Item_ModDownload) {
        if Item_ModDownload.result {
            Item = scr_load_model_obj(Item_ModDownload.file, Item_ModDownload.assetId);
            Item_ModDownload = -1
        }
    }
}

xPrev = xPos;
yPrev = yPos;
zPrev = zPos;
zRPRev = zRot;

/*
lAtPrev = lookingAt
lXPrev = lookingAtXPos;
lYPrev = lookingAtYPos;
lZPrev = lookingAtZPos;
*/

rayCast();

with obj_brick {
    hovered = false
    if clickable == 1 {
        if power(x-obj_client.xPos,2)+power(y-obj_client.yPos,2)+power(z-obj_client.zPos,2) &lt;= clickDist {
            if(obj_client.lookingAtXPos &gt;= x &amp;&amp; obj_client.lookingAtXPos &lt;= x+xs) {
                if(obj_client.lookingAtYPos &gt;= y &amp;&amp; obj_client.lookingAtYPos &lt;= y+ys) {
                    if(obj_client.lookingAtZPos &gt;= z &amp;&amp; obj_client.lookingAtZPos &lt;= z+zs) {
                        hovered = true
                        if (mouse_check_button_pressed(mb_left)) {
                            // Player has clicked on the brick
                            buffer_clear(global.BUFFER);
                            buffer_write_uint8(global.BUFFER, 5);
                            buffer_write_uint32(global.BUFFER, floor(brickID));
                            socket_write_message(obj_client.SOCKET, global.BUFFER);
                        }
                    }
                }
            }
        }
    }
}

//set size
if (room = rm_main) {
    if (window_get_width() != global.prevwidth || window_get_height() != global.prevheight) {
        global.winwidth = max(minwidth,window_get_width())
        global.winheight = median(minheight,window_get_height(),display_get_height()-8)
        
        room_goto(rm_size);
    } else {
        global.prevwidth = window_get_width();
        global.prevheight = window_get_height();
    }
}
//

socket_update_read(SOCKET);

while socket_read_message(SOCKET, global.BUFFER) {
    buffer_zlib_uncompress(global.BUFFER);
    type = buffer_read_uint8(global.BUFFER);
    switch(type) {
        case 1:
            net_id = buffer_read_uint32(global.BUFFER);
            brickCount = buffer_read_uint32(global.BUFFER);
            user_id = buffer_read_uint32(global.BUFFER);
            name = buffer_read_string(global.BUFFER)
            admin = buffer_read_uint8(global.BUFFER)
            membership = buffer_read_uint8(global.BUFFER)
            authenticated = true
            if brickCount == 0 { // There are no bricks to load.
                bricksDownloaded = true
            }
            break;
        case 2:
            var brkData;
            brkData = ""
            // I fucking hate shit maker
            while !buffer_at_end(global.BUFFER) {
                brkData += buffer_read_string(global.BUFFER);
            }
            
            load_bricks(brkData);
            bricksDownloaded = true
            break;
        case 3:
            var fig, playerAmount;
            playerAmount = buffer_read_uint8(global.BUFFER)
            var i;
            for (i = 0; i &lt; playerAmount; i+=1) {
                fig = instance_create(0, 0, obj_figure);
                fig.net_id = buffer_read_uint32(global.BUFFER);
                fig.name = buffer_read_string(global.BUFFER);
                fig.user_id = buffer_read_uint32(global.BUFFER);
                fig.admin = buffer_read_uint8(global.BUFFER);
                fig.membership = buffer_read_uint8(global.BUFFER);
            }
            break;
        case 4:
            //var information
            var user_net_id, id_string;
            user_net_id = buffer_read_uint32(global.BUFFER);
            id_string = buffer_read_string(global.BUFFER);
            if(user_net_id != net_id) {
                with obj_figure {
                    if(user_net_id == net_id) {
                        packet_handler(id_string);
                    }
                }
            } else {
                //prev_check();
                packet_handler(id_string);
            }
            break;
        case 5:
            var user_net_id;
            user_net_id = buffer_read_uint32(global.BUFFER);
            with obj_figure {
                if(user_net_id = net_id) {
                    instance_destroy();
                }
            }
            break;
        case 6:
            //chat message
            var message;
            message = buffer_read_string(global.BUFFER);
            messageAdd(message);
            break;
        case 7:
            //gui message/toggle settings
            var type;
            type = buffer_read_string(global.BUFFER);
            switch type {
                case "topPrint":
                    var message,time;
                    message = buffer_read_string(global.BUFFER);
                    time = buffer_read_uint32(global.BUFFER);
                    clientTopPrint(message,time);
                    break;
                case "centerPrint":
                    var message,time;
                    message = buffer_read_string(global.BUFFER);
                    time = buffer_read_uint32(global.BUFFER);
                    clientCenterPrint(message,time);
                    break;
                case "bottomPrint":
                    var message,time;
                    message = buffer_read_string(global.BUFFER);
                    time = buffer_read_uint32(global.BUFFER);
                    clientBottomPrint(message,time);
                    break;
                case "Ambient":
                    Ambient = buffer_read_uint32(global.BUFFER);
                    break;
                case "Sky":
                    SkyColor = buffer_read_uint32(global.BUFFER);
                    break;
                case "BaseCol":
                    BasePlateColor = buffer_read_uint32(global.BUFFER);
                    break;
                case "BaseSize":
                    BasePlateSize = buffer_read_uint32(global.BUFFER);
                    GmnDestroyBody(global.set,Ground);
                    GroundCol = GmnCreateBox(global.set,BasePlateSize,BasePlateSize,1,0,0,0);
                    Ground = GmnCreateBody(global.set,GroundCol);
                    GmnReleaseCollision(global.set,GroundCol);
                    GmnBodySetMassMatrix(Ground,0,0,0,0);
                    GmnBodySetPosition(Ground,0,0,-0.5);
                    break;
                case "Sun":
                    SunIntensity = buffer_read_uint32(global.BUFFER);
                    break;
                case "kick":
                    // it doesn't matter if you remove this, node-hill automatically destroys your socket yeet
                    socket_destroy(SOCKET);
                    show_message(buffer_read_string(global.BUFFER));
                    game_end();
                    exit;
                    break;
                case "prompt":
                    var msg;
                    msg = buffer_read_string(global.BUFFER);
                    show_message(msg)
                    break
                case "WeatherSnow":
                    Weather = "snow";
                    break;
                case "WeatherRain":
                    Weather = "rain";
                    break;
                case "WeatherSun":
                    Weather = "sun";
                    break;
            }
            break;
        case 8:
            var user_net_id,dead;
            user_net_id = buffer_read_float32(global.BUFFER);
            if(user_net_id != net_id) {
                with obj_figure {
                    if(user_net_id == net_id) {
                        alive = !buffer_read_uint8(global.BUFFER);
                    }
                }
            } else {
                alive = !buffer_read_uint8(global.BUFFER);
            }
            break;
        case 9:
            //got brick variables
            //brickID
            var brick_id,type;
            brick_id = buffer_read_uint32(global.BUFFER);
            type = buffer_read_string(global.BUFFER);
            
            with obj_brick {
                if brickID == brick_id {
                    switch type {
                        case "pos":
                            x = buffer_read_float32(global.BUFFER);
                            y = buffer_read_float32(global.BUFFER);
                            z = buffer_read_float32(global.BUFFER);
                            GmnBodySetPosition(body,x,y,z);
                            break;
                        case "rot":
                            rotation = buffer_read_uint32(global.BUFFER);
                            break;
                        case "scale":
                            xs = buffer_read_float32(global.BUFFER);
                            ys = buffer_read_float32(global.BUFFER);
                            zs = buffer_read_float32(global.BUFFER);
                            GmnDestroyBody(body);
                            bound = GmnCreateBox(global.set,xs,ys,zs,xs/2,ys/2,zs/2);
                            body = GmnCreateBody(global.set,bound);
                            GmnBodySetPosition(body,x,y,z);
                            break;
                        case "kill":
                            GmnBodySetAutoMassMatrix(body,2,0);
                            break;
                        case "destroy":
                            GmnDestroyBody(global.set, body);
                            instance_destroy();
                            break;
                        case "col":
                            color = buffer_read_uint32(global.BUFFER);
                            break;
                        case "alpha":
                            alpha = buffer_read_float32(global.BUFFER);
                            break;
                        case "lightcol":
                            light_color = buffer_read_uint32(global.BUFFER);
                            break;
                        case "lightrange":
                            light_range = buffer_read_uint32(global.BUFFER);
                            break;
                        case "model":
                            model = buffer_read_uint32(global.BUFFER);
                            TexDownload = fetch_asset(model, "brick_tex", "png", false)
                            ModDownload = fetch_asset(model, "brick_mod", "obj", false)
                            break;
                        case "collide":
                            var collide;
                            collide = buffer_read_uint8(global.BUFFER);
                            if(!collide) {
                                GmnDestroyBody(global.set,body);
                            } else {
                                bound = GmnCreateBox(global.set,xs,ys,zs,xs/2,ys/2,zs/2);
                                body = GmnCreateBody(global.set,bound);
                                GmnBodySetPosition(body,x,y,z);
                            }
                            break;
                        case "clickable":
                            clickable = buffer_read_uint8(global.BUFFER);
                            clickDist = buffer_read_uint32(global.BUFFER);
                            break;
                    }
                }
            }
            break;
        case 10:
            var t;
            t = instance_create(0,0,obj_team);
            t.teamID = buffer_read_uint32(global.BUFFER);
            t.name = buffer_read_string(global.BUFFER);
            t.color = buffer_read_uint32(global.BUFFER);
            break;
        case 11:
            var s, action, slotId, toolName, toolModel, class;
            
            action = buffer_read_uint8(global.BUFFER);
            
            slotId = buffer_read_uint32(global.BUFFER);
            toolName = buffer_read_string(global.BUFFER);
            toolModel = buffer_read_uint32(global.BUFFER);
            
            class = id;
            
            if action {
                s = instance_create(0, 0, obj_slot);
                s.slotID = slotId
                s.name = toolName
                s.Model = toolModel
            } else {
                with obj_slot {
                    if slotID == slotId {
                        instance_destroy();
                    }
                }
                with obj_figure {
                    if (Arm = slotId) {
                        Arm = -1;
                        Item = -1;
                    }
                }
                if Arm == slotId  {
                    Arm = -1;
                    Item = -1;
                }
            }
            
            break;
        case 12:
            var figure_id,figure,id_string;
            
            figure_id = buffer_read_uint32(global.BUFFER);
            figure = -1;
            
            with obj_dummy {
                if(figureID == figure_id) {
                    figure = id;
                    break;
                }
            }
            
            if(figure == -1) {
                figure = instance_create(0,0,obj_dummy);
                figure.figureID = figure_id;
            }
            
            id_string = buffer_read_string(global.BUFFER);
            
            
            // KEEP THIS CONTAINED IN "WITH FIGURE" UNLESS YOU WANT BANGLA THINGS TO HAPPEN
            // 👀👀👀👀👀👀👀👀👀👀👀
            
            with figure {
            
                for(i = 1; i &lt;= string_length(id_string); i += 1) {
                    switch string_char_at(id_string,i) {
                        case "A":
                            Name = buffer_read_string(global.BUFFER);
                            break;
                        case "B":
                            xPos = buffer_read_float32(global.BUFFER);
                            break;
                        case "C":
                            yPos = buffer_read_float32(global.BUFFER);
                            break;
                        case "D":
                            zPos = buffer_read_float32(global.BUFFER);
                            break;
                        case "E":
                            xRot = buffer_read_uint32(global.BUFFER);
                            break;
                        case "F":
                            yRot = buffer_read_uint32(global.BUFFER);
                            break;
                        case "G":
                            zRot = buffer_read_uint32(global.BUFFER);
                            break;
                        case "H":
                            xScale = buffer_read_float32(global.BUFFER);
                            break;
                        case "I":
                            yScale = buffer_read_float32(global.BUFFER);
                            break;
                        case "J":
                            zScale = buffer_read_float32(global.BUFFER);
                            break;
                        case "K":
                            partColorHead = buffer_read_uint32(global.BUFFER);
                            break;
                        case "L":
                            partColorTorso = buffer_read_uint32(global.BUFFER);
                            break;
                        case "M":
                            partColorLArm = buffer_read_uint32(global.BUFFER);
                            break;
                        case "N":
                            partColorRArm = buffer_read_uint32(global.BUFFER);
                            break;
                        case "O":
                            partColorLLeg = buffer_read_uint32(global.BUFFER);
                            break;
                        case "P":
                            partColorRLeg = buffer_read_uint32(global.BUFFER);
                            break;
                        case "Q":
                            partStickerFace = buffer_read_uint32(global.BUFFER);
                            FaceDownload = fetch_asset(partStickerFace, "face", "png", false)
                            /*
                            if string_length(figure.partStickerFace) == 8 {
                                figure.FaceDownload = download("http://www.brick-hill.com/API/client/asset_texture?id="+figure.partStickerFace+"&amp;type=face",global.APPDATA+"face"+string(figure.id)+".png");
                            } else {
                                figure.FaceDownload = -1;
                                figure.Face = -1;
                            }
                            */
                            break;
                        /*
                        case "R":
                            figure.partStickerTShirt = buffer_read_string(global.BUFFER);
                            if string_length(figure.partStickerTShirt) == 8 {
                                figure.TShirtDownload = download("http://www.brick-hill.com/API/client/asset_texture?id="+figure.partStickerTShirt+"&amp;type=tshirt",global.APPDATA+"tshirt"+string(figure.id)+".png");
                            } else {
                                figure.TShirtDownload = -1;
                                figure.TShirt = -1;
                            }
                            break;
                        case "S":
                            figure.partStickerShirt = buffer_read_string(global.BUFFER);
                            if string_length(figure.partStickerShirt) == 8 {
                                figure.ShirtDownload = download("http://www.brick-hill.com/API/client/asset_texture?id="+figure.partStickerShirt+"&amp;type=shirt",global.APPDATA+"shirt"+string(figure.id)+".png");
                            } else {
                                figure.ShirtDownload = -1;
                                figure.Shirt = -1;
                            }
                            break;
                        case "T":
                            figure.partStickerPants = buffer_read_string(global.BUFFER);
                            if string_length(figure.partStickerPants) == 8 {
                                figure.PantsDownload = download("http://www.brick-hill.com/API/client/asset_texture?id="+figure.partStickerPants+"&amp;type=pants",global.APPDATA+"pants"+string(figure.id)+".png");
                            } else {
                                figure.PantsDownload = -1;
                                figure.Pants = -1;
                            }
                            break;
                        */
                        case "U":
                            partModelHat1 = buffer_read_uint32(global.BUFFER);
                            Hat1ModDownload = fetch_asset(partModelHat1, "hat_mod1", "obj", false)
                            Hat1TexDownload = fetch_asset(partModelHat1, "hat_tex1", "png", false)
                            break;
                        case "V":
                            partModelHat2 = buffer_read_uint32(global.BUFFER);
                            Hat2ModDownload = fetch_asset(partModelHat2, "hat_mod2", "obj", false)
                            Hat2TexDownload = fetch_asset(partModelHat2, "hat_tex2", "png", false)
                            break;
                        case "W":
                            partModelHat3 = buffer_read_uint32(global.BUFFER);
                            Hat3ModDownload = fetch_asset(partModelHat3, "hat_mod3", "obj", false)
                            Hat3TexDownload = fetch_asset(partModelHat3, "hat_tex3", "png", false)
                            break;
                        case "X":
                            Speech = buffer_read_string(global.BUFFER);
                            break;
                    }
                }
            
            }
            break;
        case 13:
            var action,pID,diameter,PxPos,PyPos,PzPos,dir,vel,color;
            action = buffer_read_uint8(global.BUFFER);
            pID = buffer_read_uint32(global.BUFFER);
            if(action == 1) {
                diameter = buffer_read_uint32(global.BUFFER);
                color = buffer_read_uint32(global.BUFFER);
                PxPos = buffer_read_float32(global.BUFFER);
                PyPos = buffer_read_float32(global.BUFFER);
                PzPos = buffer_read_float32(global.BUFFER);
                dir = buffer_read_uint32(global.BUFFER);
                zdir = buffer_read_uint32(global.BUFFER);
                vel = buffer_read_uint32(global.BUFFER);
                new_projectile(pID,diameter,color,PxPos,PyPos,PzPos,dir,zdir,vel);
            } else {
                with obj_projectile {
                    if(projectileID == pID) {
                        GmnDestroyBody(global.set,Object);
                        instance_destroy();
                    }
                }
            }
            break;
        case 14: // CLEAR MAP PACKET
            with obj_brick {
                GmnDestroyBody(global.set, body);
                instance_destroy()
            }
            break
        case 15: // DELETE BOT
            figure_id = buffer_read_uint32(global.BUFFER);

            with obj_dummy {
                if(figureID == figure_id) {
                    instance_destroy()
                }
            }
        case 16: // DELETE BRICKS
            var brickAmount;
            brickAmount = buffer_read_uint32(global.BUFFER)
            
            var i;
            for (i = 0; i &lt; brickAmount; i+=1) {
                var brickId;
                brickId = buffer_read_uint32(global.BUFFER);
                with obj_brick {
                    if brickID == brickId {
                        instance_destroy()
                    }
                }
            }
            
    }
}

var state;

state = socket_get_state(SOCKET);

if state = 2 and !Connected {
    Connected = true;
} else if state = 4 {
    socket_destroy(SOCKET)
    show_message("This game has shutdown.");
    game_end();
    exit;
} else if state = 5 {
    if Connected {
        show_message("Connection lost.");
    } else {
        show_message("Cannot find server.");
    }
    socket_destroy(SOCKET);
    game_end();
    exit;
}

if textbox_focus == -1 &amp;&amp; !PAUSED {
    player_movement();
}

player_physics();
camera_update();

if keyboard_check_pressed(vk_escape) {
    PAUSED = !PAUSED;
}

if keyboard_check_pressed(ord("T")) {
    if textbox_focus == -1 {
        textbox_focus = chatBox;
        keyboard_string = "";
    }
    /*var chat;
    chat = get_string("","");
    if(string_char_at(chat,1) != "/") {
        send_command("chat", chat);
    } else {
        var command, args;
        chat = string_replace(chat,"/","");
        
        command = string_split(chat," ",0);
        args = string_replace(chat,command+" ","");
        
        send_command(command, args);
    }*/
} else if keyboard_check_pressed(vk_enter) {
    if textbox_focus == chatBox {
        var chat;
        chat = chatBox.text;
        chatBox.text = "";
        textbox_focus = -1;
        if string_replace_all(chat," ","") != "" {
            if(string_char_at(chat,1) != "/") {
                send_command("chat", chat);
            } else {
                var command, args;
                chat = string_replace(chat,"/","");
                
                command = string_split(chat," ",0);
                args = string_replace(chat,command+" ","");
                
                send_command(command, args);
            }
        }
    }
} else if keyboard_check_pressed(vk_escape) {
    textbox_focus = -1;
}

// Send player input
var currentKey, mouseClick;
currentKey = getKeyString()
mouseClick = mouse_check_button_pressed(mb_left);

if textbox_focus != chatBox &amp;&amp; (mouseClick || currentKey != "none") {
    buffer_clear(global.BUFFER);
    buffer_write_uint8(global.BUFFER, 6);
    buffer_write_uint8(global.BUFFER, mouseClick)
    buffer_write_string(global.BUFFER, currentKey)
    socket_write_message(SOCKET, global.BUFFER);
}

// Send player coords
if xPrev != xPos || yPrev != yPos || zPrev != zPos || zRPRev != zRot {
    buffer_clear(global.BUFFER);
    buffer_write_uint8(global.BUFFER, 2);
    buffer_write_float32(global.BUFFER, xPos);
    buffer_write_float32(global.BUFFER, yPos);
    buffer_write_float32(global.BUFFER, zPos);
    buffer_write_uint32(global.BUFFER, floor(zRot));
    socket_write_message(SOCKET, global.BUFFER)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="30">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_main) {
    global.winx = window_get_x();
    global.winy = window_get_y();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rm_main) {
    //window_set_position(global.winx,global.winy)
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_end();

// Destroy socket + free up memory
if (socket_exists(SOCKET)) {
    socket_destroy(SOCKET)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.winx = window_get_x();
global.winy = window_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_bold);

draw_world();

d3d_set_projection_ortho(0,0,room_width,room_height,0);
texture_set_interpolation(false);
d3d_set_lighting(false);
d3d_set_perspective(false);
d3d_set_hidden(false);

if(debug != "")
    draw_chat(room_width-10-string_width(debug),room_height-10-string_height(debug),string_replace_all(debug,"\c","\\c"));
debug = "";

draw_set_alpha(1)

draw_health();

var ch,ch_n,pl,p,player,fg,fig,figure;
draw_set_color(c_black);
pl = 0;
player[pl] = id;
with obj_figure {
    pl += 1;
    player[pl] = self.id;
}
fg = 0;
with obj_dummy {
    figure[fg] = self.id;
    fg += 1;
}

with obj_brick {
    draw_brick_click(id)
}

convertPrepare(obj_client.CamXPos,obj_client.CamYPos,obj_client.CamZPos,obj_client.CamXTo,obj_client.CamYTo,obj_client.CamZTo,0,0,1,obj_client.FOV,room_width/room_height);

for(fg = 0; fg &lt; instance_number(obj_dummy); fg += 1) {
    if figure[fg].Speech != "" {
        draw_speech(figure[fg])
    }
}

for(p = 0; p &lt;= pl; p += 1) {
    if player[p].Speech != "" {
        draw_speech(player[p])
    }
}


/*

        if power(fig.xPos-xPos,2)+power(fig.yPos-yPos,2)+power(fig.zPos-zPos,2) &lt;= 10000 {
            if GmnWorldRayCastDist(global.set,CamXPos,CamYPos,CamZPos,fig.xPos,fig.yPos,fig.zPos+6*fig.zScale) == -1 {
                convert_3d(fig.xPos,fig.yPos,fig.zPos+6*fig.zScale);
                var xText,yText;
                xText = round(x_2d-string_width(fig.Speech)/2);
                yText = round(y_2d-string_height(fig.Speech)-10);
                draw_set_color(0);
                draw_set_alpha(0.4);
                draw_roundrect(xText-10,yText-10,xText+string_width(fig.Speech)+10,yText+string_height(fig.Speech)+10,0);
                draw_sprite_ext(spr_speech,0,xText+string_width(fig.Speech)/2,yText+string_height(fig.Speech)+11,1,1,0,1,0.4);
                
                draw_set_color(c_white);
                draw_set_alpha(1);
                draw_chat(xText,yText,fig.Speech);
            }
        }
    }
}*/

if instance_number(obj_team) &lt;= 0 {
    for(p = 0; p &lt;= pl; p += 1) {
        if(player[p] != id &amp;&amp; player[p].alive) {
            if GmnWorldRayCastDist(global.set,CamXPos,CamYPos,CamZPos,player[p].xPos,player[p].yPos,player[p].zPos+6*player[p].zScale) == -1 {
                convert_3d(player[p].xPos,player[p].yPos,player[p].zPos+6*player[p].zScale);
                draw_chat(x_2d-string_width(player[p].name)/2,y_2d-string_height(player[p].name)/2,player[p].name);
            }
        }
        if player[p].admin {
                if player[p].admin &amp;&amp; player[p].user_id == 2760 { // SECRET GO AWAY !!!!!!!!!
                    draw_sprite(spr_vap,0,room_width-200,10+p*string_height(" "));
                    draw_chat(room_width-200+25,10+p*string_height(" "), "&lt;color:F5B942&gt;" + string_limit(player[p].name, 160));
                    draw_chat(room_width-string_width(string(player[p].Score))-10,10+p*string_height(" "),player[p].Score);
                } else {
                    draw_sprite(spr_admin,0,room_width-200,10+p*string_height(" "));
                    draw_chat(room_width-200+25,10+p*string_height(" "), "&lt;color:0ADEFF&gt;" + string_limit(player[p].name, 160));
                    draw_chat(room_width-string_width(string(player[p].Score))-10,10+p*string_height(" "),player[p].Score);   
                }
        } else {
            // The player has a membership
            var member;
            member = player[p].membership
            if member &gt; 1 {
                draw_sprite(get_membership(member),0,room_width-200,10+p*string_height(" "));
            }
            draw_chat(room_width-200+25,10+p*string_height(" "),string_limit(player[p].name,160));
            draw_chat(room_width-string_width(string(player[p].Score))-10,10+p*string_height(" "),player[p].Score);
        }
    }
} else {
    var nextY,teamCount;
    teamCount = 0;
    nextY = 10;
    with obj_team {
        var team_col,tp,hex;
        hex = dec_to_hex(color);
        team_col = "&lt;color:"+string_repeat("0",6-string_length(hex))+hex+"&gt;";
        tp = 0;
        draw_set_font(fnt_big);
        draw_chat(room_width-200,nextY,team_col+name);
        draw_set_font(fnt_bold);
        nextY += string_height(" ")+4;
        for(p = 0; p &lt;= pl; p += 1) {
            if(player[p].team == teamID) {
                if(player[p] != other.id) {
                    with other.id {
                        if GmnWorldRayCastDist(global.set,CamXPos,CamYPos,CamZPos,player[p].xPos,player[p].yPos,player[p].zPos+6*player[p].zScale) == -1 {
                            convert_3d(player[p].xPos,player[p].yPos,player[p].zPos+6*player[p].zScale);
                            draw_chat(x_2d-string_width(player[p].name)/2,y_2d-string_height(player[p].name)/2,team_col+player[p].name);
                        }
                    }
                }
                if player[p].admin {
                    if player[p].admin &amp;&amp; player[p].user_id == 2760 {
                        draw_sprite(spr_vap,0,room_width-200,nextY);
                        draw_chat(room_width-200+25,nextY,"&lt;color:F5B942&gt;" + string_limit(player[p].name,160));
                        draw_chat(room_width-string_width(string(player[p].Score))-10,nextY,player[p].Score);
                    } else {
                        draw_sprite(spr_admin,0,room_width-200,nextY);
                        draw_chat(room_width-200+25,nextY,"&lt;color:0ADEFF&gt;" + string_limit(player[p].name,160));
                        draw_chat(room_width-string_width(string(player[p].Score))-10,nextY,player[p].Score);
                    }
                } else {
                    // The player has a membership
                    var member;
                    member = player[p].membership
                    if member &gt; 1 {
                        draw_sprite(get_membership(member),0,room_width-200,nextY)
                    }
                    draw_chat(room_width-200+25,nextY,string_limit(player[p].name,160));
                    draw_chat(room_width-string_width(string(player[p].Score))-10,nextY,player[p].Score);
                }
                //draw_chat(room_width-200,nextY,team_col+string_limit(player[p].name,160));
                //draw_chat(room_width-string_width(string(player[p].Score))-10,nextY,team_col+string(player[p].Score));
                nextY += string_height(" ");
            }
            tp += 1;
        }
        teamCount += 1;
    }
}

ch_n = 0;
for(ch = 0; ch &lt;= 10; ch += 1) {
    if(ds_list_size(CHAT)-10+ch &gt;= 0 &amp;&amp; ds_list_size(CHAT)-10+ch &lt; ds_list_size(CHAT)) {
        draw_chat(10,10+ch_n*string_height(" "),ds_list_find_value(CHAT,ds_list_size(CHAT)-10+ch));
        ch_n += 1;
    }
}
if textbox_focus == chatBox {
    draw_set_alpha(0.4);
    draw_set_color(0);
    draw_roundrect(6,16+10*string_height(" "),224,20+11*string_height(" "),0);
}

draw_set_alpha(1);
draw_set_color(c_white);

textbox_draw(chatBox,10,18+10*string_height(" "),220,18+11*string_height(" ")+8);

if (!Connected) {
    draw_set_alpha(0.5);
    draw_set_color(c_white);
    draw_rectangle(room_width/2-80,room_height/2-30,room_width/2+80,room_height/2+30,0);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text(room_width/2,room_height/2,"Waiting for server");

    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    exit;
}

if (!authenticated) {
    draw_set_alpha(0.5);
    draw_set_color(c_white);
    draw_rectangle(room_width/2-80,room_height/2-30,room_width/2+80,room_height/2+30,0);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(room_width/2,room_height/2,"Waiting for authentication");
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    exit;
}

if (!bricksDownloaded &amp;&amp; brickCount &gt; 0) {    
    draw_set_alpha(0.5);
    draw_set_color(c_white);
    draw_rectangle(room_width/2-80,room_height/2-30,room_width/2+80,room_height/2+30,0);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(room_width/2,room_height/2,"Bricks: "+string(instance_number(obj_brick))+"/"+string(brickCount));
    exit;
}

var slotNum;
slotNum = 0;
with obj_slot {
    draw_set_alpha(0.4);
    draw_set_color(c_black);
    draw_rectangle(slotNum*100,room_height-100,(slotNum+1)*100,room_height,0);
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(slotNum*100+string_width(name)/2,room_height-50-string_height(name)/2,name);
    if obj_client.Arm == slotID {
        //draw border
        draw_set_color(c_aqua);
        draw_rectangle(slotNum*100,room_height-100,(slotNum+1)*100,room_height,1);
        draw_rectangle(slotNum*100+1,room_height-99,(slotNum+1)*100-1,room_height-1,1);
    }
    slotNum += 1;
}

draw_set_alpha(1);
with obj_topPrint {
    if current_time &lt; stop {
        draw_chat((room_width-string_width(text))/2,10,text);
    }
}
with obj_centerPrint {
    if current_time &lt; stop {
        draw_chat((room_width-string_width(text))/2,(room_height-string_height(text))/2,text);
    }
}
with obj_bottomPrint {
    if current_time &lt; stop {
        draw_chat((room_width-string_width(text))/2,room_height-string_height(text)-10,text);
    }
}

if (PAUSED) {
    draw_pause();
}

if keyboard_check(vk_f1) {
    draw_set_color(c_white);
    draw_chat(10,room_height-10-string_height(" "),"FPS: "+string(fps));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
