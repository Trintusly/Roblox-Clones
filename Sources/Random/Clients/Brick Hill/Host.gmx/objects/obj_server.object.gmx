<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Variables
global.APPDATA = environment_get_variable("APPDATA")+"\Brick Hill\";
if !directory_exists(global.APPDATA) {directory_create(global.APPDATA);}

console("***Server Startup");

message_background(bkg_message);
message_caption(1,"Brick Hill Server");
message_text_font("Montserrat",11,c_white,0)
message_input_font("Montserrat",11,c_black,0)
message_input_color(c_white)
message_button_font("Montserrat",11,c_white,0)
message_button(spr_button);
message_size(350,150);

playerCount = 0; //player[i]
brickCount = 0; //brick[i]
spawnBrickCount = 0; //spawnBrick[i]

playerID = 0;

//OUTPUT STRING
output_string = "";
last_command = "";


//MAP
Ambient = 0;
SkyColor = $e6b271;
BasePlateColor = $248233;
BasePlateSize = 100;
SunIntensity = 400;
Weather = "sun";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Server
//Set global game information
get_parameters();
get_global_ip();
if global.IP == "" {game_end(); exit;}
global.SOCKET = game_socket();

//Let Brick Hill know we exist
master_post();

//Randomize the seed so random is actually random
randomize();

//loadBRK(get_open_filename("|*.brk",""));
tempsave = file_text_open_write(global.APPDATA+"temp.bhs");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define scripts
var script;
script = define("onDeath");
script.script = 'arg[0].alive = false;

buffer_clear(global.BUFFER);
buffer_write_uint8(global.BUFFER, 8);
buffer_write_float32(global.BUFFER, arg[0].net_id);
buffer_write_uint8(global.BUFFER, 1);
with obj_client {socket_write_message(SOCKET, global.BUFFER);}

centerPrint(arg[0], "You will respawn in 4 seconds...", 1);
schedule(1000, "centerPrint("+string(arg[0])+",'+"'"+'You will respawn in 3 seconds...'+"'"+',1)");
schedule(2000, "centerPrint("+string(arg[0])+",'+"'"+'You will respawn in 2 seconds...'+"'"+',1)");
schedule(3000, "centerPrint("+string(arg[0])+",'+"'"+'You will respawn in 1 seconds...'+"'"+',1)");

schedule(4000, "playerRespawn("+string(arg[0])+")");'

script = define("onSpawn");
script.script = '';

script = define("pickSpawn");
script.script = 'var brick, client, spawnCol, possSpawnCount, s;
client = arg[0]; //for teams in future
if client.team != -1 {
    spawnCol = client.team.Color;
    possSpawnCount = 0;
    for(s = 0; s &lt; obj_server.spawnBrickCount; s += 1) {
        brick = obj_server.spawnBrick[s];
        if brick.Color == spawnCol {
            possSpawn[possSpawnCount] = brick;
            possSpawnCount += 1;
        }
    }
    if possSpawnCount &gt; 0 {
        brick = possSpawn[floor(random(possSpawnCount))];
        return string(brick.xPos+brick.xScale/2)+" "+string(brick.yPos+brick.yScale/2)+" "+string(brick.zPos+brick.zScale);
    }
}

if obj_server.spawnBrickCount &gt; 0 {
    brick = obj_server.spawnBrick[floor(random(obj_server.spawnBrickCount))];
    
    return string(brick.xPos+brick.xScale/2)+" "+string(brick.yPos+brick.yScale/2)+" "+string(brick.zPos+brick.zScale);
} else {
    return  string(random_range(-obj_server.BasePlateSize/2,obj_server.BasePlateSize/2))+" "+
            string(random_range(-obj_server.BasePlateSize/2,obj_server.BasePlateSize/2))+" "+
            string(random(obj_server.BasePlateSize/2));
}';

script = define("onGameConnection");
script.script = "";

script = define("onGameDisconnect");
script.script = "";

script = define("onTeamPick");
script.script = 'if obj_server.teamCount &gt; 0 {
    return obj_server.team[floor(random(obj_server.teamCount))];
} else {
    return -1;
}';

script = define("serverCmdChat");
script.script = '
if(other.team == -1) {
    messageAll("\c8"+other.name+"\c1:\c0 "+arg[0]+" "+arg[1]+" "+arg[2]+" "+arg[3]+" "+arg[4]+" "+arg[5]+" "+arg[6]+" "+arg[7]+" "+arg[8]+" "+arg[9]+" "+arg[10]+" "+arg[11]+" "+arg[12]+" "+arg[13]);
} else {
    //find closest team color
    var hex;
    hex = dec_to_hex(other.team.Color);
    messageAll("&lt;color:"+string_repeat("0",6-string_length(hex))+hex+"&gt;"+other.name+"\c1:\c0 "+arg[0]+" "+arg[1]+" "+arg[2]+" "+arg[3]+" "+arg[4]+" "+arg[5]+" "+arg[6]+" "+arg[7]+" "+arg[8]+" "+arg[9]+" "+arg[10]+" "+arg[11]+" "+arg[12]+" "+arg[13]);
}';

script = define("serverCmdAvatar");
script.script = '
other.partColorHead = string_to_real(arg[0]);
other.partColorTorso = string_to_real(arg[1]);
other.partColorRArm = string_to_real(arg[2]);
other.partColorLArm = string_to_real(arg[3]);
other.partColorRLeg = string_to_real(arg[4]);
other.partColorLLeg = string_to_real(arg[5]);
    
other.partStickerFace = arg[6];
other.partStickerTShirt = arg[7];
other.partStickerShirt = arg[8];
other.partStickerPants = arg[9];
    
other.partModelHat1 = arg[10];
other.partModelHat2 = arg[11];
other.partModelHat3 = arg[12];';

script = define("onClick");
script.script = '';

script = define("onProjectileHit");
script.script = '
    var pID;
    pID = arg[0];
    with obj_projectile {
        if projectileID = pID {
            projectileDestroy(id);
        }
    }
';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawnBrickCount = 0;
brickCount = 0;
teamCount = 0;
with obj_brick {
    other.brick[other.brickCount] = id;
    other.brickCount += 1;
    if Shape == "spawnpoint" {
        other.spawnBrick[other.spawnBrickCount] = id;
        other.spawnBrickCount += 1;
    }
}

with obj_team {
    other.team[other.teamCount] = id;
    other.teamCount += 1;
}

if(current_time-POSTlast &gt;= 60000) { //Post to the master server every minute
    master_post();
}

if httprequest_exists(postGame) {
    httprequest_update(postGame);
    if httprequest_get_state(postGame) != 4 {
        if(httprequest_get_state(postGame) == 5) {
            console("Error \#5: Cannot connect to Brick Hill");
            break;
        }
    } else {
        httprequest_destroy(postGame);
    }
}

if !listeningsocket_is_listening(global.SOCKET) {
    console("Error \#6: Socket closed unexpectedly");
    show_message("Error \#6:#Socket closed unexpectedly!");
    game_end();
    exit;
}

while listeningsocket_can_accept(global.SOCKET) {
    var client;
    client = instance_create(0, 0, obj_client);
    client.SOCKET = socket_create();
    listeningsocket_accept(global.SOCKET, client.SOCKET);
    client.ip = socket_get_peer_address(client.SOCKET);
    
    client.LastLoadBrick = 0;
    client.LoadBricks = true;
    
    client.net_id = playerID;
    playerID += 1;
    
    player[playerCount] = client;
    playerCount += 1;
    
    console("New client; "+client.ip);
    
    buffer_clear(global.BUFFER);
    buffer_write_uint8(global.BUFFER, 1);
    buffer_write_uint32(global.BUFFER, client.net_id);
    buffer_write_uint32(global.BUFFER, brickCount);
    buffer_zlib_compress(global.BUFFER);
    socket_write_message(client.SOCKET,global.BUFFER);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="30">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_client {
    kick(id,"The server is now closed,#thanks for playing!");
}
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_color = 0;
draw_set_color(c_white);
draw_set_font(fnt_courier);
draw_text(10,room_height-10-string_height("&gt;&gt; "+keyboard_string)-string_height(output_string+"."),output_string);
/*var clients;
clients = 0;
with obj_client {
    draw_text(10,10+clients*string_height(" "),name);
    clients += 1;
}*/

draw_text(10,room_height-10-string_height("&gt;&gt; "+keyboard_string),"&gt;&gt; "+keyboard_string);
if keyboard_check_pressed(vk_enter) {
    output_string += "&gt;&gt; "+keyboard_string+chr(10);
    last_command = keyboard_string;
    
    execute_string(keyboard_string);
    output_string += chr(10);
    keyboard_string = "";
}
if error_occurred {
    output_string += error_last+chr(10);
    error_occurred = false;
}

if keyboard_check_pressed(vk_up) {
    var swap;
    swap = keyboard_string;
    keyboard_string = last_command;
    last_command = swap;
}

if keyboard_check(vk_control) {
    if keyboard_check_pressed(ord("V")) {
        keyboard_string += clipboard_get_text();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
