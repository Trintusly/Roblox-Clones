<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SOCKET = 0;

Admin = false;
Authed = false;
Loaded = false;
LastBrick = 0;
LoadBrickNum = 0;
LoadBricks = true;
forcePos = false;
alive = 0;

LookingAt = -1;
LookingAtXPos = 0;
LookingAtYPos = 0;
LookingAtZPos = 0;
onClick = 0;
onPress = "";

xPos = 0;
yPos = 0;
zPos = 0;
xRot = 0;
yRot = 0;
zRot = 0;
xScale = 1;
yScale = 1;
zScale = 1;
Arm = -1;
toolNum = 0;
maxHealth = 100;
Health = maxHealth;
partColorHead = 0;
partColorTorso = 0;
partColorLArm = 0;
partColorRArm = 0;
partColorLLeg = 0;
partColorRLeg = 0;
partStickerFace = "0";
partStickerTShirt = "0";
partStickerShirt = "0";
partStickerPants = "0";
partModelHat1 = "0";
partModelHat2 = "0";
partModelHat3 = "0";
Score = 0;
maxSpeed = 4;
maxJumpHeight = 5;
FOV = 60;
camDist = 5;
camXPos = 0;
camYPos = -50;
camZPos = 50;
camXRot = 0;
camYRot = -20;
camZRot = 0;
camType = "fixed"; //("fixed", "orbit", "free", "first")
camObj = -1;
user_id = -1;
name = "Figure"+string(id);
team = -1;

prev_vars();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onGameDisconnect(id);

var p;
p = 0;
with obj_client {
    if id != other.id {
        obj_server.player[p] = id;
        p += 1;
    }
}
obj_server.playerCount = p;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket_update_write(SOCKET);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Send bricks
if Loaded {
    var numSent,latestBrick;
    numSent = 0;
    buffer_clear(global.BUFFER);
    buffer_write_uint8(global.BUFFER, 2);
    with obj_brick {
        if(other.LastBrick &lt; id &amp;&amp; numSent &lt; 10) {
            sendBrick(id);
            numSent += 1;
            other.LastBrick = id;
        }
        latestBrick = id;
    }
    if(numSent &gt; 0) {
        buffer_zlib_compress(global.BUFFER);
        socket_write_message(SOCKET,global.BUFFER);
    } else {
        buffer_clear(global.BUFFER);
    }
    
    if LoadBricks {
        if(latestBrick == LastBrick) {
            playerRespawn(id);
            LoadBricks = false;
        }
    }
    /*if LoadBrickNum &lt; obj_server.brickCount {
        buffer_clear(global.BUFFER);
        buffer_write_uint8(global.BUFFER, 2);
        
        var i;
        for(i = 0; i &lt; 5; i += 1) {
            //with obj_server.brick[LoadBrickNum+i] {
            if LoadBrickNum+i &lt; obj_server.brickCount {
                print("Send "+string(image_index));
                sendBrick(obj_server.brick[LoadBrickNum+i]);
            } else {
                break;
            }
        }
        LoadBrickNum += i;
        
        buffer_zlib_compress(global.BUFFER);
        socket_write_message(SOCKET,global.BUFFER);
        
        //LoadBricks = false;
    } else {
        if LoadBricks {
            playerRespawn(id);
            LoadBricks = false;
        }
    }*/
}

//Send data
//Send new data to other players
var state;
state = socket_get_state(SOCKET);
if state = 4 || state = 5 || socket_get_write_data_length(SOCKET) &gt; max_write_data_length {//The player has left/lagged poorly
    if Authed {
        with obj_client {
            if Loaded &amp;&amp; id != other.id {
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 5);
                buffer_write_uint32(global.BUFFER, other.net_id);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
            }
        }
        messageAll("\c4"+name+" has left the game.");
    }
    instance_destroy();
    exit;
}

//use prev_vars and check against new variables
//I only need to send other players the size, location, rotation + avatar colors/stickers
//FOV, campos, etc should be send only to the client recieving the change
/////FIX THIS!!! (likely after you create the new client.exe)
if Loaded {
    var IDOther;
    IDOther = prev_other_id();
    with obj_client {
        if id != other.id {
            if Loaded &amp;&amp; string_length(IDOther) &gt; 0 {
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 4);
                buffer_write_uint32(global.BUFFER, other.net_id);
                buffer_write_string(global.BUFFER, IDOther);
                prev_other_check(other.id);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
            }
        } else {
            var IDString;
            IDString = prev_ids();
            
            if string_length(IDString) &gt; 0 {
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 4);
                buffer_write_uint32(global.BUFFER, other.net_id);
                buffer_write_string(global.BUFFER, IDString);
                prev_check();
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
            }
        }
    }
}
prev_vars();

//Read data sent by player
socket_update_read(SOCKET);

while socket_read_message(SOCKET, global.BUFFER) {
    var type;
    buffer_zlib_uncompress(global.BUFFER);
    type = buffer_read_uint8(global.BUFFER);
    switch(type) {
        case 1:
            var authCheck;
            Loaded = true;
            name = buffer_read_string(global.BUFFER);
            user_id = buffer_read_uint32(global.BUFFER);
            user_version = buffer_read_string(global.BUFFER);
            if user_version != version {
                kick(id,"This server is running Brick Hill V"+version+"#You are running Brick Hill V"+user_version);
            }
            onGameConnection(name, ip);
            
            if auth_check(name, ip, user_id) {
                with obj_client {
                    if id != other.id {
                        if user_id == other.user_id {
                            kick(other.id,"You can only join on one account!");
                        }
                    }
                }
                with obj_client {
                    if Loaded &amp;&amp; id != other.id { // Send this client all the other clients
                        buffer_clear(global.BUFFER);
                        buffer_write_uint8(global.BUFFER, 3);
                        buffer_write_uint32(global.BUFFER, net_id);
                        buffer_write_string(global.BUFFER, name);
                        buffer_write_uint32(global.BUFFER, user_id);
                        buffer_write_uint8(global.BUFFER, Admin);
                        buffer_zlib_compress(global.BUFFER);
                        socket_write_message(other.SOCKET, global.BUFFER);
                        
                        buffer_clear(global.BUFFER); // Send all the other clients this client
                        buffer_write_uint8(global.BUFFER, 3);
                        buffer_write_uint32(global.BUFFER, other.net_id);
                        buffer_write_string(global.BUFFER, other.name);
                        buffer_write_uint32(global.BUFFER, other.user_id);
                        buffer_write_uint8(global.BUFFER, other.Admin);
                        buffer_zlib_compress(global.BUFFER);
                        socket_write_message(SOCKET, global.BUFFER);
                    }
                }
                
                with obj_item {
                    other.tool[other.toolNum] = slotID;
                    other.toolNum += 1;
                    
                    buffer_clear(global.BUFFER);
                    buffer_write_uint8(global.BUFFER, 11);
                    buffer_write_uint8(global.BUFFER, 1);
                    buffer_write_uint32(global.BUFFER, slotID);
                    buffer_write_string(global.BUFFER, name);
                    buffer_write_string(global.BUFFER, Model);
                    buffer_zlib_compress(global.BUFFER);
                    socket_write_message(other.SOCKET, global.BUFFER);
                }
                
                with obj_team {
                    buffer_clear(global.BUFFER);
                    buffer_write_uint8(global.BUFFER, 10);
                    buffer_write_uint32(global.BUFFER, teamID);
                    buffer_write_string(global.BUFFER, name);
                    buffer_write_uint32(global.BUFFER, Color);
                    buffer_zlib_compress(global.BUFFER);
                    socket_write_message(other.SOCKET, global.BUFFER);
                }
                
                with obj_figure {
                    buffer_clear(global.BUFFER);
                    buffer_write_uint8(global.BUFFER, 12);
                    buffer_write_uint32(global.BUFFER, figureID);
                    buffer_write_string(global.BUFFER, "ABCDEFGHIJKLMNOPQRSTUVWX");
                    buffer_write_string(global.BUFFER, Name);
                    buffer_write_float32(global.BUFFER, xPos);
                    buffer_write_float32(global.BUFFER, yPos);
                    buffer_write_float32(global.BUFFER, zPos);
                    buffer_write_uint32(global.BUFFER, xRot);
                    buffer_write_uint32(global.BUFFER, yRot);
                    buffer_write_uint32(global.BUFFER, zRot);
                    buffer_write_float32(global.BUFFER, xScale);
                    buffer_write_float32(global.BUFFER, yScale);
                    buffer_write_float32(global.BUFFER, zScale);
                    buffer_write_uint32(global.BUFFER, partColorHead);
                    buffer_write_uint32(global.BUFFER, partColorTorso);
                    buffer_write_uint32(global.BUFFER, partColorLArm);
                    buffer_write_uint32(global.BUFFER, partColorRArm);
                    buffer_write_uint32(global.BUFFER, partColorLLeg);
                    buffer_write_uint32(global.BUFFER, partColorRLeg);
                    buffer_write_string(global.BUFFER, partStickerFace);
                    buffer_write_string(global.BUFFER, partStickerTShirt);
                    buffer_write_string(global.BUFFER, partStickerShirt);
                    buffer_write_string(global.BUFFER, partStickerPants);
                    buffer_write_string(global.BUFFER, partModelHat1);
                    buffer_write_string(global.BUFFER, partModelHat2);
                    buffer_write_string(global.BUFFER, partModelHat3);
                    buffer_write_string(global.BUFFER, Speech);
                    buffer_zlib_compress(global.BUFFER);
                    socket_write_message(other.SOCKET, global.BUFFER);
                }
                
                team = onTeamPick(id);
                
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 7);
                buffer_write_string(global.BUFFER, "Ambient");
                buffer_write_uint32(global.BUFFER, obj_server.Ambient);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
                
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 7);
                buffer_write_string(global.BUFFER, "Sky");
                buffer_write_uint32(global.BUFFER, obj_server.SkyColor);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
                
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 7);
                buffer_write_string(global.BUFFER, "BaseCol");
                buffer_write_uint32(global.BUFFER, obj_server.BasePlateColor);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
                
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 7);
                buffer_write_string(global.BUFFER, "BaseSize");
                buffer_write_uint32(global.BUFFER, obj_server.BasePlateSize);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
                
                buffer_clear(global.BUFFER);
                buffer_write_uint8(global.BUFFER, 7);
                buffer_write_string(global.BUFFER, "Sun");
                buffer_write_uint32(global.BUFFER, obj_server.SunIntensity);
                buffer_zlib_compress(global.BUFFER);
                socket_write_message(SOCKET, global.BUFFER);
                
                if(obj_server.Weather != "sun") {
                    buffer_clear(global.BUFFER);
                    buffer_write_uint8(global.BUFFER, 7);
                    buffer_write_string(global.BUFFER, "Weather"+string_upper(string_char_at(obj_server.Weather,1))+string_delete(obj_server.Weather,1,1));
                    socket_write_message(SOCKET, global.BUFFER);
                }
                
                with obj_client {
                    if id != other.id {
                        if Loaded {
                            buffer_clear(global.BUFFER);
                            buffer_write_uint8(global.BUFFER, 4);
                            buffer_write_uint32(global.BUFFER, net_id);
                            //buffer_write_string(global.BUFFER, "ABCDEFGHIJKLMNOPQR");
                            buffer_write_string(global.BUFFER, "ABCDEFGHIJKLMNOPQRSTUVWXY");
                            buffer_write_float32(global.BUFFER, xPos);
                            buffer_write_float32(global.BUFFER, yPos);
                            buffer_write_float32(global.BUFFER, zPos);
                            buffer_write_uint32(global.BUFFER, xRot);
                            buffer_write_uint32(global.BUFFER, yRot);
                            buffer_write_uint32(global.BUFFER, zRot);
                            buffer_write_float32(global.BUFFER, xScale);
                            buffer_write_float32(global.BUFFER, yScale);
                            buffer_write_float32(global.BUFFER, zScale);
                            buffer_write_uint32(global.BUFFER, Arm);
                            buffer_write_uint32(global.BUFFER, partColorHead);
                            buffer_write_uint32(global.BUFFER, partColorTorso);
                            buffer_write_uint32(global.BUFFER, partColorLArm);
                            buffer_write_uint32(global.BUFFER, partColorRArm);
                            buffer_write_uint32(global.BUFFER, partColorLLeg);
                            buffer_write_uint32(global.BUFFER, partColorRLeg);
                            buffer_write_string(global.BUFFER, partStickerFace);
                            buffer_write_string(global.BUFFER, partStickerTShirt);
                            buffer_write_string(global.BUFFER, partStickerShirt);
                            buffer_write_string(global.BUFFER, partStickerPants);
                            buffer_write_string(global.BUFFER, partModelHat1);
                            buffer_write_string(global.BUFFER, partModelHat2);
                            buffer_write_string(global.BUFFER, partModelHat3);
                            buffer_write_uint32(global.BUFFER, Score);
                            buffer_write_uint32(global.BUFFER, team);
                            buffer_zlib_compress(global.BUFFER);
                            socket_write_message(other.SOCKET, global.BUFFER);
                        }
                    }
                }
                
                messageAll("\c4"+name+" has joined the game.");
                Authed = true;
            } else {
                Authed = false;
                kick(id, "Could not authenticate your user, please reconnect.");
            }
            break;
        case 2:
            xPos = buffer_read_float32(global.BUFFER);
            yPos = buffer_read_float32(global.BUFFER);
            zPos = buffer_read_float32(global.BUFFER);
            zRot = buffer_read_uint32(global.BUFFER);
            LookingAt = buffer_read_float32(global.BUFFER);
            LookingAtXPos = buffer_read_float32(global.BUFFER);
            LookingAtYPos = buffer_read_float32(global.BUFFER);
            LookingAtZPos = buffer_read_float32(global.BUFFER);
            onClick = buffer_read_uint8(global.BUFFER);
            onPress = buffer_read_string(global.BUFFER);
            if onClick {
                execute("onClick",id);
            }
            break;
        case 3:
            var command,arguments;
            command = string_replace_all(string_lower(buffer_read_string(global.BUFFER)),'"','');
            arguments = buffer_read_string(global.BUFFER);
            var arg,str;
            str = 'execute("serverCmd'+command+'"';
            var i;
            for(i=0;i&lt;15;i+=1) {
                str += ",'"+string_replace_all(string_split(arguments," ",i),"'","'+"+chr(34)+"'"+chr(34)+"+'")+"'";
            }
            str += ")";
            execute_string(str);
            
            /*if(command == "chat") {
                if(team == -1) {
                    messageAll("\c8"+name+"\c1:\c0 "+arguments);
                } else {
                    //find closest team color
                    var hex;
                    hex = dec_to_hex(team.Color);
                    messageAll("&lt;color:"+string_repeat("0",6-string_length(hex))+hex+"&gt;"+name+"\c1:\c0 "+arguments);
                }
            } else if(command == "avatar") {
                partColorHead = string_to_real(string_split(arguments," ",0));
                partColorTorso = string_to_real(string_split(arguments," ",1));
                partColorRArm = string_to_real(string_split(arguments," ",2));
                partColorLArm = string_to_real(string_split(arguments," ",3));
                partColorRLeg = string_to_real(string_split(arguments," ",4));
                partColorLLeg = string_to_real(string_split(arguments," ",5));
                
                partStickerFace = string_split(arguments," ",6);
                partStickerTShirt = string_split(arguments," ",7);
                partStickerShirt = string_split(arguments," ",8);
                partStickerPants = string_split(arguments," ",9);
                
                partModelHat1 = string_split(arguments," ",10);
                partModelHat2 = string_split(arguments," ",11);
                partModelHat3 = string_split(arguments," ",12);
            } else {
                //it's a command
                with obj_command {
                    if(name == command) {
                        var i;
                        for(i=0;i&lt;20;i+=1) {
                            arg[i] = string_split(arguments," ",i);
                        }
                        execute_string(script);
                    }
                }
            }*/
            break;
        case 4:
            var pID,uID;
            pID = buffer_read_uint32(global.BUFFER);
            uID = buffer_read_uint32(global.BUFFER);
            with obj_client {
                if(uID == net_id) {uID = id;}
            }
            execute("onProjectileHit",pID,uID);
            break;
    }
}

if playerGetKeyboardPressed(id, "1") &amp;&amp; toolNum &gt;= 1 {if (Arm == tool[0]) {Arm = -1;} else {Arm = tool[0];}}
if playerGetKeyboardPressed(id, "2") &amp;&amp; toolNum &gt;= 2 {if (Arm == tool[1]) {Arm = -1;} else {Arm = tool[1];}}
if playerGetKeyboardPressed(id, "3") &amp;&amp; toolNum &gt;= 3 {if (Arm == tool[2]) {Arm = -1;} else {Arm = tool[2];}}
if playerGetKeyboardPressed(id, "4") &amp;&amp; toolNum &gt;= 4 {if (Arm == tool[3]) {Arm = -1;} else {Arm = tool[3];}}
if playerGetKeyboardPressed(id, "5") &amp;&amp; toolNum &gt;= 5 {if (Arm == tool[4]) {Arm = -1;} else {Arm = tool[4];}}
if playerGetKeyboardPressed(id, "6") &amp;&amp; toolNum &gt;= 6 {if (Arm == tool[5]) {Arm = -1;} else {Arm = tool[5];}}
if playerGetKeyboardPressed(id, "7") &amp;&amp; toolNum &gt;= 7 {if (Arm == tool[6]) {Arm = -1;} else {Arm = tool[6];}}
if playerGetKeyboardPressed(id, "8") &amp;&amp; toolNum &gt;= 8 {if (Arm == tool[7]) {Arm = -1;} else {Arm = tool[7];}}
if playerGetKeyboardPressed(id, "9") &amp;&amp; toolNum &gt;= 9 {if (Arm == tool[8]) {Arm = -1;} else {Arm = tool[8];}}
if playerGetKeyboardPressed(id, "0") &amp;&amp; toolNum &gt;= 10 {if (Arm == tool[9]) {Arm = -1;} else {Arm = tool[9];}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
